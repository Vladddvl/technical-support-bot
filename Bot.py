import io

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from DB import workDB


bot_token = "6956938097:AAHwkGApDzp2JeQDRkW-qNVjgl6WYNVY7gs"
bot = Bot(token=bot_token)
dp = Dispatcher(bot=bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
catching_suggestion = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
    [KeyboardButton(text="–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
markup_for_operators = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="–°–≤–æ–±–æ–¥–µ–Ω"), KeyboardButton(text="–ó–∞–Ω—è—Ç")]
])

def create_keyboard(page_number: int, number_pages: int, program_id: int, type: str) -> InlineKeyboardMarkup:

    if page_number < 0:
        page_number = 1
    elif page_number > number_pages:
        page_number = number_pages

    markup_back = InlineKeyboardButton(text='<', callback_data=f'last_page_{program_id}_{page_number - 1}_{type}')
    markup_number_page = InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}/{number_pages}', callback_data='empty_callback')
    markup_next = InlineKeyboardButton(text='>', callback_data=f'new_page_{program_id}_{page_number + 1}_{type}')
    keyboard_next_back = InlineKeyboardMarkup(inline_keyboard=[[markup_back, markup_number_page, markup_next]])
    return keyboard_next_back
def unloading(dict_values: dict, id_program: int, page_number: int=1) -> InlineKeyboardMarkup:
    buttons_on_page = 10
    count = len(dict_values) // buttons_on_page + 1 if len(dict_values) % buttons_on_page else len(dict_values) // buttons_on_page
    if page_number < 1:
        page_number = count
    elif page_number > count:
        page_number = 1

    start = (page_number - 1) * buttons_on_page
    end = min(page_number * buttons_on_page, len(dict_values))

    btns = []


    for instructions_id, instructions_name in list(dict_values.items())[start:end]:
        btns.append(
            [InlineKeyboardButton(text=instructions_name, callback_data=f"selected_instruction_id_{instructions_id}")]
        )
    btns.append(
        [InlineKeyboardButton(text="<", callback_data=f"back_{id_program}_{page_number - 1}"),
         InlineKeyboardButton(text=f"{page_number}/{count}", callback_data=f"{page_number}/{len(dict_values)}"),
         InlineKeyboardButton(text=">", callback_data=f"next_{id_program}_{page_number + 1}")]
    )
    return InlineKeyboardMarkup(inline_keyboard=btns)


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command(commands=["start"]))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! ü§ñ –Ø —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è."
                         " –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–º–æ—á—å —Å –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π."
                         " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. üõ†Ô∏è", reply_markup=markup)

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥

    workDB.insert_user(message.chat.first_name, message.chat.id)


# –û—Ç–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def answer_and_buttons(message: types.Message):
    if message.text and not (message.text.startswith('/') or message.text in ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–ü–æ–º–æ—â—å", "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"]) and catching_suggestion == {}:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –±–¥
        answer = workDB.get_answer(message.text)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if answer:
            await message.answer(answer)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. ü§îüîç")

    elif catching_suggestion != {}:
        catching_suggestion['suggestion'] = message.text
        workDB.insert_suggestion(catching_suggestion)
        catching_suggestion.clear()
        await message.answer('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ')

    elif message.text == "–ü–æ–º–æ—â—å":
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
        programs = workDB.get_programs()
        markup_programs = [InlineKeyboardButton(text=program_name, callback_data=f"data_id_{program_id}") for
                           program_id, program_name in
                           programs.items()]
        keyboard_programs = InlineKeyboardMarkup(inline_keyboard=[markup_programs])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É: üñ•Ô∏èüìäüìù", reply_markup=keyboard_programs)

    elif message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏':
        programs = workDB.get_programs()
        markup_programs = [InlineKeyboardButton(text=program_name, callback_data=f"instructions_{program_id}") for
                           program_id, program_name in
                           programs.items()]
        keyboard_programs = InlineKeyboardMarkup(inline_keyboard=[markup_programs])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É: üñ•Ô∏èüìäüìù", reply_markup=keyboard_programs)


    elif message.text == '–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º':
        operator = workDB.get_free_operators()
        if operator:
            pass
            await message.answer(f'üìû –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator} –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
        else:
            await message.reply("‚åõÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@dp.callback_query(F.data.startswith("back") | F.data.startswith("next"))
async def navigation(callback: CallbackQuery):
    cb_data = callback.data.split("_")
    page_num = int(cb_data[2])
    id_program = int(cb_data[1])
    data_instructions = workDB.get_instructions(id_program)
    dict_instructions = {}
    for i in data_instructions:
        dict_instructions[i[0]] = i[1]

    new_markup = unloading(dict_instructions, id_program, page_num)
    if new_markup != callback.message.reply_markup:
        await callback.message.edit_reply_markup(reply_markup=new_markup)


list_programs = workDB.get_programs()
list_programs_id = [f"data_id_{i}" for i in list_programs.keys()]


@dp.callback_query(F.data.startswith(tuple(list_programs_id)))
async def settings(callback: CallbackQuery):
    program_id = callback.data.split('_')[2]
    await callback.message.delete()
    markup_install = InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data=f'install_{program_id}')
    markup_settings = InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data=f'settings_{program_id}')
    keyboard_help = InlineKeyboardMarkup(inline_keyboard=[[markup_install, markup_settings]])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –≤ —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å: üí°üõ†Ô∏è", reply_markup=keyboard_help)


@dp.callback_query(F.data.startswith('install_'))
async def help_with_install(callback: CallbackQuery):
    await callback.message.delete()
    program_id = callback.data.split('_')[1]
    install_paragraphs = workDB.get_install_paragraph(program_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
    if install_paragraphs:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        image_id = install_paragraphs[0][2]

        description = install_paragraphs[0][0]
        page_number = install_paragraphs[0][1]

        number_pages = len(install_paragraphs)
        keyboard_pages = create_keyboard(page_number, number_pages, program_id, 'install')

        if image_id:
            image_path = f"/support_bot/image/{image_id}.png"
            image = types.FSInputFile(image_path)

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            message_text = description

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await callback.message.answer_photo(photo=image, caption=message_text, reply_markup=keyboard_pages)
        else:
            await callback.message.answer(description, reply_markup=keyboard_pages)
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        pass


@dp.callback_query(F.data.startswith('settings_'))
async def help_with_settings(callback: CallbackQuery):
    await callback.message.delete()
    program_id = callback.data.split('_')[1]
    setting_paragraphs = workDB.get_settings_paragraph(program_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
    if setting_paragraphs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        image_id = setting_paragraphs[0][2]
        description = setting_paragraphs[0][0]
        page_number = setting_paragraphs[0][1]
        number_pages = len(setting_paragraphs)
        keyboard_pages = create_keyboard(page_number, number_pages, program_id, 'setting')

        if image_id:
            image_path = f"/support_bot/image/{image_id}.png"
            image = types.FSInputFile(image_path)

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            message_text = description

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await callback.message.answer_photo(photo=image, caption=message_text, reply_markup=keyboard_pages)
        else:
            await callback.message.answer(description, reply_markup=keyboard_pages)
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        pass


@dp.callback_query(F.data.startswith('instructions_'))
async def instructions(callback: CallbackQuery):
    await callback.message.delete()
    all_instructions = workDB.get_instructions(callback.data.split('_')[1])
    id_program = callback.data.split('_')[1]
    dict_instructions = {}
    for i in all_instructions:
        dict_instructions[i[0]] = i[1]

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: üìù", reply_markup=unloading(dict_instructions, int(id_program)))


@dp.callback_query(F.data.startswith('selected_instruction_'))
async def selected_instruction(callback: CallbackQuery):
    await callback.message.delete()
    instruction_id = callback.data.split('_')[-1]
    content = workDB.get_content(instruction_id)
    texts = [item[0] for item in content]
    # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∏–∫–æ–≤
    workDB.insert_count_of_clicks(instruction_id)

    await callback.message.answer(*texts)

    # –í—ã–±–æ—Ä –æ—Ü–µ–Ω–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚òÖ", callback_data=f"rating_{instruction_id}_1"),
            InlineKeyboardButton(text="‚òÖ‚òÖ", callback_data=f"rating_{instruction_id}_2"),
            InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ", callback_data=f"rating_{instruction_id}_3"),
            InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ‚òÖ", callback_data=f"rating_{instruction_id}_4"),
            InlineKeyboardButton(text="‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ", callback_data=f"rating_{instruction_id}_5")
        ],
        [
            InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"suggestion_{instruction_id}")
        ]
    ])
    await callback.message.answer("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith('rating'))
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    rating = int(callback_query.data.split('_')[2])
    inst_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    workDB.enter_rating(user_id, inst_id, rating)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {rating} –∑–≤–µ–∑–¥")


@dp.callback_query(F.data.startswith('suggestion_'))
async def selected_instruction(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")

    catching_suggestion['instruction_id'] = callback.data.split('_')[1]
    catching_suggestion['user_tg_id'] = callback.message.chat.id


@dp.callback_query(F.data.startswith("last_page") | F.data.startswith("new_page"))
async def next_page(callback: CallbackQuery):
    await callback.message.delete()
    program_id = int(callback.data.split('_')[2])
    page_number = int(callback.data.split('_')[3])

    if callback.data.split('_')[4] == 'setting':
        settings_or_install = 'setting'
        data_paragraphs = workDB.get_settings_paragraph(program_id)
    else:
        data_paragraphs = workDB.get_install_paragraph(program_id)
        settings_or_install = 'install'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
    if 0 < page_number <= len(data_paragraphs):
        paragraph = data_paragraphs[page_number - 1]
        image_id = paragraph[2]
        description = paragraph[0]
        page_number = paragraph[1]
        number_pages = len(data_paragraphs)
        keyboard_pages = create_keyboard(page_number, number_pages, program_id, settings_or_install)

        if image_id:
            image_path = f"/support_bot/image/{image_id}.png"
            image = types.FSInputFile(image_path)

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            message_text = f"{description}"


            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await callback.message.answer_photo(photo=image, caption=message_text, reply_markup=keyboard_pages)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
            message_text = f"{description}"
            await callback.message.answer(message_text,reply_markup= keyboard_pages)
    else:
        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é
        await callback.message.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


if __name__ == '__main__':
    dp.run_polling(bot)