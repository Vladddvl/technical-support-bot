import random
import sqlite3
from fuzzywuzzy import fuzz, process

con = sqlite3.connect('DB.db')
cursor = con.cursor()

with con:
        # -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        cursor.execute('''CREATE TABLE IF NOT EXISTS User (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            user_tg_id INT NOT NULL
                          )''')

        # -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–û—Ç–≤–µ—Ç—ã"
        cursor.execute('''CREATE TABLE IF NOT EXISTS Answer (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            question TEXT,
                            answer TEXT
                            )''')

        # -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        cursor.execute('''CREATE TABLE IF NOT EXISTS Instruction (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            title VARCHAR(255) NOT NULL,
                            content TEXT NOT NULL,
                            count_click INT,
                            program_id INT,
                            rating FLOAT,
                            FOREIGN KEY (program_id) REFERENCES Program(id)
                        )''')

        # -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        cursor.execute('''CREATE TABLE IF NOT EXISTS UserSuggestions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INT NOT NULL,
                            instruction_id INT NOT NULL,
                            suggestion TEXT,
                            status VARCHAR(100),
                            FOREIGN KEY (user_id) REFERENCES Users(id),
                            FOREIGN KEY (instruction_id) REFERENCES Instructions(id),
                            UNIQUE (user_id, instruction_id)
                        )''')

        # -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"
        cursor.execute('''CREATE TABLE IF NOT EXISTS BotSettingsHistory (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            change_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            change_description TEXT
                        )''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS SettingsParagraph (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            paragraphs TEXT,
                            image TEXT,
                            page INT,
                            program_id INT,
                            FOREIGN KEY (program_id) REFERENCES Program(id)
                        )''')


        cursor.execute('''CREATE TABLE IF NOT EXISTS InstallationParagraph (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            paragraphs TEXT,
                            image TEXT,
                            page INT,
                            program_id INT,
                            FOREIGN KEY (program_id) REFERENCES Program(id)
                       )''')

        # -- –¢–∞–±–ª–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        cursor.execute('''CREATE TABLE IF NOT EXISTS Program (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            program_name VARCHAR(255)
                        )''')

        # -- –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        cursor.execute('''CREATE TABLE IF NOT EXISTS Operators (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            operator_name VARCHAR(50),
                            status BOOLEAN,
                            operators_tg_id INT
                        )''')

        # -- –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''CREATE TABLE IF NOT EXISTS UserQueries (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_tg_id INT,
                            query_text TEXT,
                            query_date DATETIME
                        )''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS Admins (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        level INT,
                        login INT,
                        password INT
                        )''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS UserRatings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INT NOT NULL,
                        instruction_id INT NOT NULL,
                        rating FLOAT,
                        FOREIGN KEY (user_id) REFERENCES User(id),
                        FOREIGN KEY (instruction_id) REFERENCES Instruction(id),
                        UNIQUE (user_id, instruction_id)
                         );''')

class MethodsDB:
        def __init__(self, con: sqlite3.Connection):
                self.con = con
                self.cursor = con.cursor()

        def insert_user(self, username: str, user_tg_id: int):
                """
                –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, id)
                :param username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                """
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
                self.cursor.execute("SELECT COUNT(*) FROM User WHERE user_tg_id = ?", (user_tg_id,))
                count = self.cursor.fetchone()[0]

                if count == 0:
                        self.cursor.execute("INSERT INTO User (username, user_tg_id) VALUES (?, ?)", (username, user_tg_id))
                        self.con.commit()

        def get_answer(self, question: str):
                """
                –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                :param question: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :return: –û—Ç–≤–µ—Ç –∏–∑ –±–¥ (–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                """
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                all_questions = [row[0] for row in self.cursor.execute('SELECT question FROM Answer').fetchall()]

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fuzzywuzzy –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
                closest_match = process.extractOne(question, all_questions)

                if closest_match is not None and closest_match[1] >= 60:
                        # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                        answer = self.cursor.execute('SELECT answer FROM Answer WHERE question = ?',
                                                     (closest_match[0],)).fetchone()

                        return answer[0] if answer else ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                else:
                        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞üòî, –æ–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Éüòá"

        def get_programs(self):
                """
                :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ id - –∫–ª—é—á, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã - –∑–Ω–∞—á–µ–Ω–∏–µ
                """
                all_programs = self.cursor.execute('SELECT id, program_name FROM Program').fetchall()
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
                programs_dict = {}
                # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
                for program in all_programs:
                        program_id, program_name = program
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - id, –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        programs_dict[program_id] = program_name
                return programs_dict

        def get_settings_paragraph(self, program_id: int):
                """
                :param program: –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è id –ø—Ä–æ–≥—Ä–∞–º–º—ã
                :return: –í—ã–¥–∞–µ—Ç –ø—É–Ω–∫—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                """
                paragraphs = self.cursor.execute('SELECT paragraphs, page, image FROM Program '
                                                 'INNER JOIN SettingsParagraph '
                                                 'ON Program.id = SettingsParagraph.program_id '
                                                 'WHERE Program.id = ?', (program_id,)).fetchall()
                return paragraphs

        def get_install_paragraph(self, program_id: int):
                """
                :param program: –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è id –ø—Ä–æ–≥—Ä–∞–º–º—ã
                :return: –í—ã–¥–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                """
                paragraphs = self.cursor.execute('SELECT paragraphs, page, image FROM Program '
                                                 'INNER JOIN InstallationParagraph '
                                                 'ON Program.id = InstallationParagraph.program_id '
                                                 'WHERE Program.id = ?', (program_id,)).fetchall()
                return paragraphs

        def get_instructions(self, program_id: int):
                """
                :param program_id: –ê–π–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                :return: –í—ã–¥–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∞–π–¥–∏—à–∫–æ–π
                """

                instructions = self.cursor.execute('SELECT Instruction.id, title, content FROM Instruction '
                                                   'INNER JOIN Program '
                                                   'ON Instruction.program_id = Program.id '
                                                   'WHERE Program.id = ?', (program_id,)).fetchall()
                return instructions

        def get_content(self, instruction_id: int):
                """
                :param instruction_id: –ê–π–¥–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                :return: –í—ã—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
                """

                content = self.cursor.execute('SELECT  content FROM Instruction '
                                                   'WHERE id = ?', (instruction_id,)).fetchall()

                return content

        def get_free_operators(self):
                """
                :return: –ü–æ–ª—É—á–∞–µ–º id —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                """

                operators = self.cursor.execute('SELECT operator_name FROM Operators WHERE status = 0').fetchall()

                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                if operators:
                        random_operator = random.choice(operators)
                        return random_operator[0]
                else:
                        return None

        def get_all_operators(self):
                """
                :return: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                """

                all_operators = self.cursor.execute('SELECT operators_tg_id FROM Operators').fetchall()

                return all_operators

        def enter_rating(self, user_tg_id: int, instruction_id: int, user_rating: int):
                """
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                :param user_tg_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param instruction_id: ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                :param user_rating: –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                """
                try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ User –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user_tg_id
                        user_id_row = self.cursor.execute('SELECT id FROM User WHERE user_tg_id = ?', (user_tg_id,))
                        user_id_result = user_id_row.fetchone()

                        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è user_tg_id –≤ —Ç–∞–±–ª–∏—Ü–µ User
                        if user_id_result is None:
                                self.cursor.execute('INSERT INTO User (user_tg_id) VALUES (?)', (user_tg_id,))
                                self.con.commit()  # –ù–µ –∑–∞–±—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_id —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                                user_id_row = self.cursor.execute('SELECT id FROM User WHERE user_tg_id = ?',
                                                                  (user_tg_id,))
                                user_id_result = user_id_row.fetchone()

                        user_id = user_id_result[0]

                        existing_rating_row = self.cursor.execute(
                                'SELECT id FROM UserRatings WHERE user_id = ? AND instruction_id = ?',
                                (user_id, instruction_id))
                        existing_rating_result = existing_rating_row.fetchone()

                        if existing_rating_result is not None:

                                self.cursor.execute(
                                        "UPDATE UserRatings SET rating = ? WHERE user_id = ? AND instruction_id = ?",
                                        (user_rating, user_id, instruction_id))
                                self.con.commit()
                        else:

                                self.cursor.execute(
                                        "INSERT INTO UserRatings (user_id, instruction_id, rating) VALUES (?, ?, ?)",
                                        (user_id, instruction_id, user_rating))
                                self.con.commit()

                except sqlite3.Error as e:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", e)

                try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                        overall_rating = self.cursor.execute('SELECT rating FROM UserRatings WHERE instruction_id = ?',
                                                             (instruction_id,)).fetchall()

                        # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                        sum_rating = sum(int(rating[0]) for rating in overall_rating)

                        if overall_rating:
                                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                                average_rating = sum_rating / len(overall_rating)

                                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                                self.cursor.execute('UPDATE Instruction SET rating = ? WHERE id = ?',
                                                    (average_rating, instruction_id))
                                self.con.commit()

                except sqlite3.Error as e:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:", e)


        def insert_count_of_clicks(self, instruction_id: int):
                """
                :param instruction_id: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–π–¥–∏
                """
                try:
                        self.cursor.execute('SELECT count_click FROM Instruction WHERE id = ?', (instruction_id,))
                        current_clicks = self.cursor.fetchone()

                        if current_clicks and isinstance(current_clicks[0], int):
                                new_click = current_clicks[0] + 1
                        else:
                                new_click = 1

                        self.cursor.execute("UPDATE Instruction SET count_click = ? WHERE id = ?",
                                            (new_click, instruction_id))
                        self.con.commit()
                except sqlite3.Error as e:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤:", e)


        def insert_suggestion(self, dict_suggestion: dict):
                """
                –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                :param dict_suggetion: —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π
                """

                # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –∏–∑ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏
                try:
                        self.cursor.execute('SELECT id FROM User WHERE user_tg_id = ?',
                                            (dict_suggestion['user_tg_id'],))
                        user_id = self.cursor.fetchone()
                        user_id = int(user_id[0])

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                        self.cursor.execute('SELECT id FROM UserSuggestions WHERE user_id = ? AND instruction_id = ?',
                                            (user_id, dict_suggestion['instruction_id']))
                        existing_suggestion = self.cursor.fetchone()

                        if existing_suggestion:
                                self.cursor.execute(
                                        'UPDATE UserSuggestions SET suggestion = ?, status = ? WHERE id = ?',
                                        (dict_suggestion['suggestion'], 'wait', existing_suggestion[0]))
                                self.con.commit()
                        else:
                                self.cursor.execute(
                                        'INSERT INTO UserSuggestions(user_id, instruction_id, suggestion, status) '
                                        'VALUES (?, ?, ?, ?)',
                                        (user_id, dict_suggestion['instruction_id'],
                                         dict_suggestion['suggestion'], 'wait'))
                                self.con.commit()

                except sqlite3.Error as e:
                        print("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)


        def get_suggestion(self):
            all_suggestion = self.cursor.execute('SELECT * FROM UserSuggestions').fetchall()

            return all_suggestion

        def add_program(self, name_program):
            """
            :param name_program: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            """

            self.cursor.execute(
                "INSERT INTO Program (program_name) VALUES (?)",
                (name_program,))
            self.con.commit()

        def delete_program(self, name_program):
                """
                :param name_program: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                """

                query = "DELETE FROM Program WHERE program_name = ?"
                self.cursor.execute(query, (name_program,))
                self.con.commit()

        def get_settings_column(self, program_name):
                """
                :param –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                :return: –í—ã–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                """

                self.cursor.execute("SELECT paragraphs, page, image FROM SettingsParagraph "
                                    "INNER JOIN Program"
                                    "ON SettingsParagraph.program_id = Program.id"
                                    "WHERE program  ",(program_name,))







workDB = MethodsDB(con)
